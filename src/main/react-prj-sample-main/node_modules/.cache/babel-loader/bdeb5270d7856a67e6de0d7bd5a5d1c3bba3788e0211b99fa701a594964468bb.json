{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _slicedToArray = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar featureQueries = require('caniuse-lite/data/features/css-featurequeries.js');\nvar _require = require('caniuse-lite'),\n  feature = _require.feature;\nvar _require2 = require('postcss'),\n  parse = _require2.parse;\nvar Browsers = require('./browsers');\nvar brackets = require('./brackets');\nvar Value = require('./value');\nvar utils = require('./utils');\nvar data = feature(featureQueries);\nvar supported = [];\nfor (var browser in data.stats) {\n  var versions = data.stats[browser];\n  for (var version in versions) {\n    var support = versions[version];\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version);\n    }\n  }\n}\nvar Supports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Supports(Prefixes, all) {\n    _classCallCheck(this, Supports);\n    this.Prefixes = Prefixes;\n    this.all = all;\n  }\n\n  /**\n   * Return prefixer only with @supports supported browsers\n   */\n  _createClass(Supports, [{\n    key: \"prefixer\",\n    value: function prefixer() {\n      if (this.prefixerCache) {\n        return this.prefixerCache;\n      }\n      var filtered = this.all.browsers.selected.filter(function (i) {\n        return supported.includes(i);\n      });\n      var browsers = new Browsers(this.all.browsers.data, filtered, this.all.options);\n      this.prefixerCache = new this.Prefixes(this.all.data, browsers, this.all.options);\n      return this.prefixerCache;\n    }\n\n    /**\n     * Parse string into declaration property and value\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      var parts = str.split(':');\n      var prop = parts[0];\n      var value = parts[1];\n      if (!value) value = '';\n      return [prop.trim(), value.trim()];\n    }\n\n    /**\n     * Create virtual rule to process it by prefixer\n     */\n  }, {\n    key: \"virtual\",\n    value: function virtual(str) {\n      var _this$parse = this.parse(str),\n        _this$parse2 = _slicedToArray(_this$parse, 2),\n        prop = _this$parse2[0],\n        value = _this$parse2[1];\n      var rule = parse('a{}').first;\n      rule.append({\n        prop: prop,\n        value: value,\n        raws: {\n          before: ''\n        }\n      });\n      return rule;\n    }\n\n    /**\n     * Return array of Declaration with all necessary prefixes\n     */\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(str) {\n      var rule = this.virtual(str);\n      if (this.disabled(rule.first)) {\n        return rule.nodes;\n      }\n      var result = {\n        warn: function warn() {\n          return null;\n        }\n      };\n      var prefixer = this.prefixer().add[rule.first.prop];\n      prefixer && prefixer.process && prefixer.process(rule.first, result);\n      var _iterator = _createForOfIteratorHelper(rule.nodes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var decl = _step.value;\n          var _iterator2 = _createForOfIteratorHelper(this.prefixer().values('add', rule.first.prop)),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var value = _step2.value;\n              value.process(decl);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          Value.save(this.all, decl);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return rule.nodes;\n    }\n\n    /**\n     * Return true if brackets node is \"not\" word\n     */\n  }, {\n    key: \"isNot\",\n    value: function isNot(node) {\n      return typeof node === 'string' && /not\\s*/i.test(node);\n    }\n\n    /**\n     * Return true if brackets node is \"or\" word\n     */\n  }, {\n    key: \"isOr\",\n    value: function isOr(node) {\n      return typeof node === 'string' && /\\s*or\\s*/i.test(node);\n    }\n\n    /**\n     * Return true if brackets node is (prop: value)\n     */\n  }, {\n    key: \"isProp\",\n    value: function isProp(node) {\n      return typeof node === 'object' && node.length === 1 && typeof node[0] === 'string';\n    }\n\n    /**\n     * Return true if prefixed property has no unprefixed\n     */\n  }, {\n    key: \"isHack\",\n    value: function isHack(all, unprefixed) {\n      var check = new RegExp(\"(\\\\(|\\\\s)\".concat(utils.escapeRegexp(unprefixed), \":\"));\n      return !check.test(all);\n    }\n\n    /**\n     * Return true if we need to remove node\n     */\n  }, {\n    key: \"toRemove\",\n    value: function toRemove(str, all) {\n      var _this$parse3 = this.parse(str),\n        _this$parse4 = _slicedToArray(_this$parse3, 2),\n        prop = _this$parse4[0],\n        value = _this$parse4[1];\n      var unprefixed = this.all.unprefixed(prop);\n      var cleaner = this.all.cleaner();\n      if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) {\n        return true;\n      }\n      var _iterator3 = _createForOfIteratorHelper(cleaner.values('remove', unprefixed)),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var checker = _step3.value;\n          if (checker.check(value)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return false;\n    }\n\n    /**\n     * Remove all unnecessary prefixes\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(nodes, all) {\n      var i = 0;\n      while (i < nodes.length) {\n        if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {\n          if (this.toRemove(nodes[i][0], all)) {\n            nodes.splice(i, 2);\n            continue;\n          }\n          i += 2;\n          continue;\n        }\n        if (typeof nodes[i] === 'object') {\n          nodes[i] = this.remove(nodes[i], all);\n        }\n        i += 1;\n      }\n      return nodes;\n    }\n\n    /**\n     * Clean brackets with one child\n     */\n  }, {\n    key: \"cleanBrackets\",\n    value: function cleanBrackets(nodes) {\n      var _this = this;\n      return nodes.map(function (i) {\n        if (typeof i !== 'object') {\n          return i;\n        }\n        if (i.length === 1 && typeof i[0] === 'object') {\n          return _this.cleanBrackets(i[0]);\n        }\n        return _this.cleanBrackets(i);\n      });\n    }\n\n    /**\n     * Add \" or \" between properties and convert it to brackets format\n     */\n  }, {\n    key: \"convert\",\n    value: function convert(progress) {\n      var result = [''];\n      var _iterator4 = _createForOfIteratorHelper(progress),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var i = _step4.value;\n          result.push([\"\".concat(i.prop, \": \").concat(i.value)]);\n          result.push(' or ');\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      result[result.length - 1] = '';\n      return result;\n    }\n\n    /**\n     * Compress value functions into a string nodes\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes) {\n      var _this2 = this;\n      if (typeof nodes !== 'object') {\n        return nodes;\n      }\n      nodes = nodes.filter(function (i) {\n        return i !== '';\n      });\n      if (typeof nodes[0] === 'string') {\n        var firstNode = nodes[0].trim();\n        if (firstNode.includes(':') || firstNode === 'selector' || firstNode === 'not selector') {\n          return [brackets.stringify(nodes)];\n        }\n      }\n      return nodes.map(function (i) {\n        return _this2.normalize(i);\n      });\n    }\n\n    /**\n     * Add prefixes\n     */\n  }, {\n    key: \"add\",\n    value: function add(nodes, all) {\n      var _this3 = this;\n      return nodes.map(function (i) {\n        if (_this3.isProp(i)) {\n          var prefixed = _this3.prefixed(i[0]);\n          if (prefixed.length > 1) {\n            return _this3.convert(prefixed);\n          }\n          return i;\n        }\n        if (typeof i === 'object') {\n          return _this3.add(i, all);\n        }\n        return i;\n      });\n    }\n\n    /**\n     * Add prefixed declaration\n     */\n  }, {\n    key: \"process\",\n    value: function process(rule) {\n      var ast = brackets.parse(rule.params);\n      ast = this.normalize(ast);\n      ast = this.remove(ast, rule.params);\n      ast = this.add(ast, rule.params);\n      ast = this.cleanBrackets(ast);\n      rule.params = brackets.stringify(ast);\n    }\n\n    /**\n     * Check global options\n     */\n  }, {\n    key: \"disabled\",\n    value: function disabled(node) {\n      if (!this.all.options.grid) {\n        if (node.prop === 'display' && node.value.includes('grid')) {\n          return true;\n        }\n        if (node.prop.includes('grid') || node.prop === 'justify-items') {\n          return true;\n        }\n      }\n      if (this.all.options.flexbox === false) {\n        if (node.prop === 'display' && node.value.includes('flex')) {\n          return true;\n        }\n        var other = ['order', 'justify-content', 'align-items', 'align-content'];\n        if (node.prop.includes('flex') || other.includes(node.prop)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }]);\n  return Supports;\n}();\nmodule.exports = Supports;","map":{"version":3,"names":["featureQueries","require","feature","parse","Browsers","brackets","Value","utils","data","supported","browser","stats","versions","version","support","test","push","Supports","Prefixes","all","prefixerCache","filtered","browsers","selected","filter","i","includes","options","str","parts","split","prop","value","trim","rule","first","append","raws","before","virtual","disabled","nodes","result","warn","prefixer","add","process","decl","values","save","node","length","unprefixed","check","RegExp","escapeRegexp","cleaner","remove","isHack","checker","isNot","isProp","isOr","toRemove","splice","map","cleanBrackets","progress","firstNode","stringify","normalize","prefixed","convert","ast","params","grid","flexbox","other","module","exports"],"sources":["C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/autoprefixer/lib/supports.js"],"sourcesContent":["let featureQueries = require('caniuse-lite/data/features/css-featurequeries.js')\nlet { feature } = require('caniuse-lite')\nlet { parse } = require('postcss')\n\nlet Browsers = require('./browsers')\nlet brackets = require('./brackets')\nlet Value = require('./value')\nlet utils = require('./utils')\n\nlet data = feature(featureQueries)\n\nlet supported = []\nfor (let browser in data.stats) {\n  let versions = data.stats[browser]\n  for (let version in versions) {\n    let support = versions[version]\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version)\n    }\n  }\n}\n\nclass Supports {\n  constructor(Prefixes, all) {\n    this.Prefixes = Prefixes\n    this.all = all\n  }\n\n  /**\n   * Return prefixer only with @supports supported browsers\n   */\n  prefixer() {\n    if (this.prefixerCache) {\n      return this.prefixerCache\n    }\n\n    let filtered = this.all.browsers.selected.filter(i => {\n      return supported.includes(i)\n    })\n\n    let browsers = new Browsers(\n      this.all.browsers.data,\n      filtered,\n      this.all.options\n    )\n    this.prefixerCache = new this.Prefixes(\n      this.all.data,\n      browsers,\n      this.all.options\n    )\n    return this.prefixerCache\n  }\n\n  /**\n   * Parse string into declaration property and value\n   */\n  parse(str) {\n    let parts = str.split(':')\n    let prop = parts[0]\n    let value = parts[1]\n    if (!value) value = ''\n    return [prop.trim(), value.trim()]\n  }\n\n  /**\n   * Create virtual rule to process it by prefixer\n   */\n  virtual(str) {\n    let [prop, value] = this.parse(str)\n    let rule = parse('a{}').first\n    rule.append({ prop, value, raws: { before: '' } })\n    return rule\n  }\n\n  /**\n   * Return array of Declaration with all necessary prefixes\n   */\n  prefixed(str) {\n    let rule = this.virtual(str)\n    if (this.disabled(rule.first)) {\n      return rule.nodes\n    }\n\n    let result = { warn: () => null }\n\n    let prefixer = this.prefixer().add[rule.first.prop]\n    prefixer && prefixer.process && prefixer.process(rule.first, result)\n\n    for (let decl of rule.nodes) {\n      for (let value of this.prefixer().values('add', rule.first.prop)) {\n        value.process(decl)\n      }\n      Value.save(this.all, decl)\n    }\n\n    return rule.nodes\n  }\n\n  /**\n   * Return true if brackets node is \"not\" word\n   */\n  isNot(node) {\n    return typeof node === 'string' && /not\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is \"or\" word\n   */\n  isOr(node) {\n    return typeof node === 'string' && /\\s*or\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is (prop: value)\n   */\n  isProp(node) {\n    return (\n      typeof node === 'object' &&\n      node.length === 1 &&\n      typeof node[0] === 'string'\n    )\n  }\n\n  /**\n   * Return true if prefixed property has no unprefixed\n   */\n  isHack(all, unprefixed) {\n    let check = new RegExp(`(\\\\(|\\\\s)${utils.escapeRegexp(unprefixed)}:`)\n    return !check.test(all)\n  }\n\n  /**\n   * Return true if we need to remove node\n   */\n  toRemove(str, all) {\n    let [prop, value] = this.parse(str)\n    let unprefixed = this.all.unprefixed(prop)\n\n    let cleaner = this.all.cleaner()\n\n    if (\n      cleaner.remove[prop] &&\n      cleaner.remove[prop].remove &&\n      !this.isHack(all, unprefixed)\n    ) {\n      return true\n    }\n\n    for (let checker of cleaner.values('remove', unprefixed)) {\n      if (checker.check(value)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Remove all unnecessary prefixes\n   */\n  remove(nodes, all) {\n    let i = 0\n    while (i < nodes.length) {\n      if (\n        !this.isNot(nodes[i - 1]) &&\n        this.isProp(nodes[i]) &&\n        this.isOr(nodes[i + 1])\n      ) {\n        if (this.toRemove(nodes[i][0], all)) {\n          nodes.splice(i, 2)\n          continue\n        }\n\n        i += 2\n        continue\n      }\n\n      if (typeof nodes[i] === 'object') {\n        nodes[i] = this.remove(nodes[i], all)\n      }\n\n      i += 1\n    }\n    return nodes\n  }\n\n  /**\n   * Clean brackets with one child\n   */\n  cleanBrackets(nodes) {\n    return nodes.map(i => {\n      if (typeof i !== 'object') {\n        return i\n      }\n\n      if (i.length === 1 && typeof i[0] === 'object') {\n        return this.cleanBrackets(i[0])\n      }\n\n      return this.cleanBrackets(i)\n    })\n  }\n\n  /**\n   * Add \" or \" between properties and convert it to brackets format\n   */\n  convert(progress) {\n    let result = ['']\n    for (let i of progress) {\n      result.push([`${i.prop}: ${i.value}`])\n      result.push(' or ')\n    }\n    result[result.length - 1] = ''\n    return result\n  }\n\n  /**\n   * Compress value functions into a string nodes\n   */\n  normalize(nodes) {\n    if (typeof nodes !== 'object') {\n      return nodes\n    }\n\n    nodes = nodes.filter(i => i !== '')\n\n    if (typeof nodes[0] === 'string') {\n      let firstNode = nodes[0].trim()\n\n      if (\n        firstNode.includes(':') ||\n        firstNode === 'selector' ||\n        firstNode === 'not selector'\n      ) {\n        return [brackets.stringify(nodes)]\n      }\n    }\n    return nodes.map(i => this.normalize(i))\n  }\n\n  /**\n   * Add prefixes\n   */\n  add(nodes, all) {\n    return nodes.map(i => {\n      if (this.isProp(i)) {\n        let prefixed = this.prefixed(i[0])\n        if (prefixed.length > 1) {\n          return this.convert(prefixed)\n        }\n\n        return i\n      }\n\n      if (typeof i === 'object') {\n        return this.add(i, all)\n      }\n\n      return i\n    })\n  }\n\n  /**\n   * Add prefixed declaration\n   */\n  process(rule) {\n    let ast = brackets.parse(rule.params)\n    ast = this.normalize(ast)\n    ast = this.remove(ast, rule.params)\n    ast = this.add(ast, rule.params)\n    ast = this.cleanBrackets(ast)\n    rule.params = brackets.stringify(ast)\n  }\n\n  /**\n   * Check global options\n   */\n  disabled(node) {\n    if (!this.all.options.grid) {\n      if (node.prop === 'display' && node.value.includes('grid')) {\n        return true\n      }\n      if (node.prop.includes('grid') || node.prop === 'justify-items') {\n        return true\n      }\n    }\n\n    if (this.all.options.flexbox === false) {\n      if (node.prop === 'display' && node.value.includes('flex')) {\n        return true\n      }\n      let other = ['order', 'justify-content', 'align-items', 'align-content']\n      if (node.prop.includes('flex') || other.includes(node.prop)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = Supports\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}