{"ast":null,"code":"var browserslist = require('browserslist');\nvar _require = require('caniuse-lite'),\n  agents = _require.agents;\nvar pico = require('picocolors');\nvar Browsers = require('./browsers');\nvar Prefixes = require('./prefixes');\nvar dataPrefixes = require('../data/prefixes');\nvar getInfo = require('./info');\nvar autoprefixerData = {\n  browsers: agents,\n  prefixes: dataPrefixes\n};\nvar WARNING = '\\n' + '  Replace Autoprefixer `browsers` option to Browserslist config.\\n' + '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\\n' + '\\n' + '  Using `browsers` option can cause errors. Browserslist config can\\n' + '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\\n' + '\\n' + '  If you really need to use option, rename it to `overrideBrowserslist`.\\n' + '\\n' + '  Learn more at:\\n' + '  https://github.com/browserslist/browserslist#readme\\n' + '  https://twitter.com/browserslist\\n' + '\\n';\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.apply(obj) === '[object Object]';\n}\nvar cache = new Map();\nfunction timeCapsule(result, prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return;\n  }\n  if (prefixes.add.selectors.length > 0) {\n    return;\n  }\n  if (Object.keys(prefixes.add).length > 2) {\n    return;\n  }\n  /* c8 ignore next 11 */\n  result.warn('Autoprefixer target browsers do not need any prefixes.' + 'You do not need Autoprefixer anymore.\\n' + 'Check your Browserslist config to be sure that your targets ' + 'are set up correctly.\\n' + '\\n' + '  Learn more at:\\n' + '  https://github.com/postcss/autoprefixer#readme\\n' + '  https://github.com/browserslist/browserslist#readme\\n' + '\\n');\n}\nmodule.exports = plugin;\nfunction plugin() {\n  for (var _len = arguments.length, reqs = new Array(_len), _key = 0; _key < _len; _key++) {\n    reqs[_key] = arguments[_key];\n  }\n  var options;\n  if (reqs.length === 1 && isPlainObject(reqs[0])) {\n    options = reqs[0];\n    reqs = undefined;\n  } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {\n    reqs = undefined;\n  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {\n    options = reqs[1];\n    reqs = reqs[0];\n  } else if (typeof reqs[reqs.length - 1] === 'object') {\n    options = reqs.pop();\n  }\n  if (!options) {\n    options = {};\n  }\n  if (options.browser) {\n    throw new Error('Change `browser` option to `overrideBrowserslist` in Autoprefixer');\n  } else if (options.browserslist) {\n    throw new Error('Change `browserslist` option to `overrideBrowserslist` in Autoprefixer');\n  }\n  if (options.overrideBrowserslist) {\n    reqs = options.overrideBrowserslist;\n  } else if (options.browsers) {\n    if (typeof console !== 'undefined' && console.warn) {\n      console.warn(pico.red(WARNING.replace(/`[^`]+`/g, function (i) {\n        return pico.yellow(i.slice(1, -1));\n      })));\n    }\n    reqs = options.browsers;\n  }\n  var brwlstOpts = {\n    ignoreUnknownVersions: options.ignoreUnknownVersions,\n    stats: options.stats,\n    env: options.env\n  };\n  function loadPrefixes(opts) {\n    var d = autoprefixerData;\n    var browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts);\n    var key = browsers.selected.join(', ') + JSON.stringify(options);\n    if (!cache.has(key)) {\n      cache.set(key, new Prefixes(d.prefixes, browsers, options));\n    }\n    return cache.get(key);\n  }\n  return {\n    postcssPlugin: 'autoprefixer',\n    prepare: function prepare(result) {\n      var prefixes = loadPrefixes({\n        from: result.opts.from,\n        env: options.env\n      });\n      return {\n        OnceExit: function OnceExit(root) {\n          timeCapsule(result, prefixes);\n          if (options.remove !== false) {\n            prefixes.processor.remove(root, result);\n          }\n          if (options.add !== false) {\n            prefixes.processor.add(root, result);\n          }\n        }\n      };\n    },\n    info: function info(opts) {\n      opts = opts || {};\n      opts.from = opts.from || process.cwd();\n      return getInfo(loadPrefixes(opts));\n    },\n    options: options,\n    browsers: reqs\n  };\n}\nplugin.postcss = true;\n\n/**\n * Autoprefixer data\n */\nplugin.data = autoprefixerData;\n\n/**\n * Autoprefixer default browsers\n */\nplugin.defaults = browserslist.defaults;\n\n/**\n * Inspect with default Autoprefixer\n */\nplugin.info = function () {\n  return plugin().info();\n};","map":{"version":3,"names":["browserslist","require","agents","pico","Browsers","Prefixes","dataPrefixes","getInfo","autoprefixerData","browsers","prefixes","WARNING","isPlainObject","obj","Object","prototype","toString","apply","cache","Map","timeCapsule","result","selected","length","add","selectors","keys","warn","module","exports","plugin","reqs","options","undefined","Array","isArray","pop","browser","Error","overrideBrowserslist","console","red","replace","i","yellow","slice","brwlstOpts","ignoreUnknownVersions","stats","env","loadPrefixes","opts","d","key","join","JSON","stringify","has","set","get","postcssPlugin","prepare","from","OnceExit","root","remove","processor","info","process","cwd","postcss","data","defaults"],"sources":["C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/autoprefixer/lib/autoprefixer.js"],"sourcesContent":["let browserslist = require('browserslist')\nlet { agents } = require('caniuse-lite')\nlet pico = require('picocolors')\n\nlet Browsers = require('./browsers')\nlet Prefixes = require('./prefixes')\nlet dataPrefixes = require('../data/prefixes')\nlet getInfo = require('./info')\n\nlet autoprefixerData = { browsers: agents, prefixes: dataPrefixes }\n\nconst WARNING =\n  '\\n' +\n  '  Replace Autoprefixer `browsers` option to Browserslist config.\\n' +\n  '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\\n' +\n  '\\n' +\n  '  Using `browsers` option can cause errors. Browserslist config can\\n' +\n  '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\\n' +\n  '\\n' +\n  '  If you really need to use option, rename it to `overrideBrowserslist`.\\n' +\n  '\\n' +\n  '  Learn more at:\\n' +\n  '  https://github.com/browserslist/browserslist#readme\\n' +\n  '  https://twitter.com/browserslist\\n' +\n  '\\n'\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.apply(obj) === '[object Object]'\n}\n\nlet cache = new Map()\n\nfunction timeCapsule(result, prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return\n  }\n  if (prefixes.add.selectors.length > 0) {\n    return\n  }\n  if (Object.keys(prefixes.add).length > 2) {\n    return\n  }\n  /* c8 ignore next 11 */\n  result.warn(\n    'Autoprefixer target browsers do not need any prefixes.' +\n      'You do not need Autoprefixer anymore.\\n' +\n      'Check your Browserslist config to be sure that your targets ' +\n      'are set up correctly.\\n' +\n      '\\n' +\n      '  Learn more at:\\n' +\n      '  https://github.com/postcss/autoprefixer#readme\\n' +\n      '  https://github.com/browserslist/browserslist#readme\\n' +\n      '\\n'\n  )\n}\n\nmodule.exports = plugin\n\nfunction plugin(...reqs) {\n  let options\n  if (reqs.length === 1 && isPlainObject(reqs[0])) {\n    options = reqs[0]\n    reqs = undefined\n  } else if (reqs.length === 0 || (reqs.length === 1 && !reqs[0])) {\n    reqs = undefined\n  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {\n    options = reqs[1]\n    reqs = reqs[0]\n  } else if (typeof reqs[reqs.length - 1] === 'object') {\n    options = reqs.pop()\n  }\n\n  if (!options) {\n    options = {}\n  }\n\n  if (options.browser) {\n    throw new Error(\n      'Change `browser` option to `overrideBrowserslist` in Autoprefixer'\n    )\n  } else if (options.browserslist) {\n    throw new Error(\n      'Change `browserslist` option to `overrideBrowserslist` in Autoprefixer'\n    )\n  }\n\n  if (options.overrideBrowserslist) {\n    reqs = options.overrideBrowserslist\n  } else if (options.browsers) {\n    if (typeof console !== 'undefined' && console.warn) {\n      console.warn(\n        pico.red(WARNING.replace(/`[^`]+`/g, i => pico.yellow(i.slice(1, -1))))\n      )\n    }\n    reqs = options.browsers\n  }\n\n  let brwlstOpts = {\n    ignoreUnknownVersions: options.ignoreUnknownVersions,\n    stats: options.stats,\n    env: options.env\n  }\n\n  function loadPrefixes(opts) {\n    let d = autoprefixerData\n    let browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts)\n    let key = browsers.selected.join(', ') + JSON.stringify(options)\n\n    if (!cache.has(key)) {\n      cache.set(key, new Prefixes(d.prefixes, browsers, options))\n    }\n\n    return cache.get(key)\n  }\n\n  return {\n    postcssPlugin: 'autoprefixer',\n\n    prepare(result) {\n      let prefixes = loadPrefixes({\n        from: result.opts.from,\n        env: options.env\n      })\n\n      return {\n        OnceExit(root) {\n          timeCapsule(result, prefixes)\n          if (options.remove !== false) {\n            prefixes.processor.remove(root, result)\n          }\n          if (options.add !== false) {\n            prefixes.processor.add(root, result)\n          }\n        }\n      }\n    },\n\n    info(opts) {\n      opts = opts || {}\n      opts.from = opts.from || process.cwd()\n      return getInfo(loadPrefixes(opts))\n    },\n\n    options,\n    browsers: reqs\n  }\n}\n\nplugin.postcss = true\n\n/**\n * Autoprefixer data\n */\nplugin.data = autoprefixerData\n\n/**\n * Autoprefixer default browsers\n */\nplugin.defaults = browserslist.defaults\n\n/**\n * Inspect with default Autoprefixer\n */\nplugin.info = () => plugin().info()\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}