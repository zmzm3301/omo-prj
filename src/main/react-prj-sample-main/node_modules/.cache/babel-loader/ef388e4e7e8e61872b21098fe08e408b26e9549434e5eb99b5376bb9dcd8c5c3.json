{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nfunction last(array) {\n  return array[array.length - 1];\n}\nvar brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n    var _iterator = _createForOfIteratorHelper(str),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var sym = _step.value;\n        if (sym === '(') {\n          current = [''];\n          last(stack).push(current);\n          stack.push(current);\n          continue;\n        }\n        if (sym === ')') {\n          stack.pop();\n          current = last(stack);\n          current.push('');\n          continue;\n        }\n        current[current.length - 1] += sym;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return stack[0];\n  },\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify: function stringify(ast) {\n    var result = '';\n    var _iterator2 = _createForOfIteratorHelper(ast),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n        if (typeof i === 'object') {\n          result += \"(\".concat(brackets.stringify(i), \")\");\n          continue;\n        }\n        result += i;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return result;\n  }\n};\nmodule.exports = brackets;","map":{"version":3,"names":["last","array","length","brackets","parse","str","current","stack","sym","push","pop","stringify","ast","result","i","module","exports"],"sources":["C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/autoprefixer/lib/brackets.js"],"sourcesContent":["function last(array) {\n  return array[array.length - 1]\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = ['']\n    let stack = [current]\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = ['']\n        last(stack).push(current)\n        stack.push(current)\n        continue\n      }\n\n      if (sym === ')') {\n        stack.pop()\n        current = last(stack)\n        current.push('')\n        continue\n      }\n\n      current[current.length - 1] += sym\n    }\n\n    return stack[0]\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = ''\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`\n        continue\n      }\n\n      result += i\n    }\n    return result\n  }\n}\n\nmodule.exports = brackets\n"],"mappings":";AAAA,SAASA,IAAI,CAACC,KAAK,EAAE;EACnB,OAAOA,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;AAChC;AAEA,IAAIC,QAAQ,GAAG;EACb;AACF;AACA;EACEC,KAAK,iBAACC,GAAG,EAAE;IACT,IAAIC,OAAO,GAAG,CAAC,EAAE,CAAC;IAClB,IAAIC,KAAK,GAAG,CAACD,OAAO,CAAC;IAAA,2CAELD,GAAG;MAAA;IAAA;MAAnB,oDAAqB;QAAA,IAAZG,GAAG;QACV,IAAIA,GAAG,KAAK,GAAG,EAAE;UACfF,OAAO,GAAG,CAAC,EAAE,CAAC;UACdN,IAAI,CAACO,KAAK,CAAC,CAACE,IAAI,CAACH,OAAO,CAAC;UACzBC,KAAK,CAACE,IAAI,CAACH,OAAO,CAAC;UACnB;QACF;QAEA,IAAIE,GAAG,KAAK,GAAG,EAAE;UACfD,KAAK,CAACG,GAAG,EAAE;UACXJ,OAAO,GAAGN,IAAI,CAACO,KAAK,CAAC;UACrBD,OAAO,CAACG,IAAI,CAAC,EAAE,CAAC;UAChB;QACF;QAEAH,OAAO,CAACA,OAAO,CAACJ,MAAM,GAAG,CAAC,CAAC,IAAIM,GAAG;MACpC;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAOD,KAAK,CAAC,CAAC,CAAC;EACjB,CAAC;EAED;AACF;AACA;EACEI,SAAS,qBAACC,GAAG,EAAE;IACb,IAAIC,MAAM,GAAG,EAAE;IAAA,4CACDD,GAAG;MAAA;IAAA;MAAjB,uDAAmB;QAAA,IAAVE,CAAC;QACR,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;UACzBD,MAAM,eAAQV,QAAQ,CAACQ,SAAS,CAACG,CAAC,CAAC,MAAG;UACtC;QACF;QAEAD,MAAM,IAAIC,CAAC;MACb;IAAC;MAAA;IAAA;MAAA;IAAA;IACD,OAAOD,MAAM;EACf;AACF,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGb,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}