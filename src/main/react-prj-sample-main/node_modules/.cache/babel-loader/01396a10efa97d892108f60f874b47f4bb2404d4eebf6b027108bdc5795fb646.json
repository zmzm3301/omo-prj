{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Prefixer = require('./prefixer');\nvar Browsers = require('./browsers');\nvar utils = require('./utils');\nvar Declaration = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Declaration, _Prefixer);\n  var _super = _createSuper(Declaration);\n  function Declaration() {\n    _classCallCheck(this, Declaration);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Declaration, [{\n    key: \"check\",\n    value:\n    /**\n     * Always true, because we already get prefixer by property name\n     */\n    function check( /* decl */\n    ) {\n      return true;\n    }\n\n    /**\n     * Return prefixed version of property\n     */\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prop, prefix) {\n      return prefix + prop;\n    }\n\n    /**\n     * Return unprefixed version of property\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize(prop) {\n      return prop;\n    }\n\n    /**\n     * Check `value`, that it contain other prefixes, rather than `prefix`\n     */\n  }, {\n    key: \"otherPrefixes\",\n    value: function otherPrefixes(value, prefix) {\n      var _iterator = _createForOfIteratorHelper(Browsers.prefixes()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var other = _step.value;\n          if (other === prefix) {\n            continue;\n          }\n          if (value.includes(other)) {\n            return value.replace(/var\\([^)]+\\)/, '').includes(other);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return false;\n    }\n\n    /**\n     * Set prefix to declaration\n     */\n  }, {\n    key: \"set\",\n    value: function set(decl, prefix) {\n      decl.prop = this.prefixed(decl.prop, prefix);\n      return decl;\n    }\n\n    /**\n     * Should we use visual cascade for prefixes\n     */\n  }, {\n    key: \"needCascade\",\n    value: function needCascade(decl) {\n      if (!decl._autoprefixerCascade) {\n        decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').includes('\\n');\n      }\n      return decl._autoprefixerCascade;\n    }\n\n    /**\n     * Return maximum length of possible prefixed property\n     */\n  }, {\n    key: \"maxPrefixed\",\n    value: function maxPrefixed(prefixes, decl) {\n      if (decl._autoprefixerMax) {\n        return decl._autoprefixerMax;\n      }\n      var max = 0;\n      var _iterator2 = _createForOfIteratorHelper(prefixes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var prefix = _step2.value;\n          prefix = utils.removeNote(prefix);\n          if (prefix.length > max) {\n            max = prefix.length;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      decl._autoprefixerMax = max;\n      return decl._autoprefixerMax;\n    }\n\n    /**\n     * Calculate indentation to create visual cascade\n     */\n  }, {\n    key: \"calcBefore\",\n    value: function calcBefore(prefixes, decl) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var max = this.maxPrefixed(prefixes, decl);\n      var diff = max - utils.removeNote(prefix).length;\n      var before = decl.raw('before');\n      if (diff > 0) {\n        before += Array(diff).fill(' ').join('');\n      }\n      return before;\n    }\n\n    /**\n     * Remove visual cascade\n     */\n  }, {\n    key: \"restoreBefore\",\n    value: function restoreBefore(decl) {\n      var lines = decl.raw('before').split('\\n');\n      var min = lines[lines.length - 1];\n      this.all.group(decl).up(function (prefixed) {\n        var array = prefixed.raw('before').split('\\n');\n        var last = array[array.length - 1];\n        if (last.length < min.length) {\n          min = last;\n        }\n      });\n      lines[lines.length - 1] = min;\n      decl.raws.before = lines.join('\\n');\n    }\n\n    /**\n     * Clone and insert new declaration\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(decl, prefix, prefixes) {\n      var cloned = this.set(this.clone(decl), prefix);\n      if (!cloned) return undefined;\n      var already = decl.parent.some(function (i) {\n        return i.prop === cloned.prop && i.value === cloned.value;\n      });\n      if (already) {\n        return undefined;\n      }\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n      return decl.parent.insertBefore(decl, cloned);\n    }\n\n    /**\n     * Did this declaration has this prefix above\n     */\n  }, {\n    key: \"isAlready\",\n    value: function isAlready(decl, prefixed) {\n      var already = this.all.group(decl).up(function (i) {\n        return i.prop === prefixed;\n      });\n      if (!already) {\n        already = this.all.group(decl).down(function (i) {\n          return i.prop === prefixed;\n        });\n      }\n      return already;\n    }\n\n    /**\n     * Clone and add prefixes for declaration\n     */\n  }, {\n    key: \"add\",\n    value: function add(decl, prefix, prefixes, result) {\n      var prefixed = this.prefixed(decl.prop, prefix);\n      if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {\n        return undefined;\n      }\n      return this.insert(decl, prefix, prefixes, result);\n    }\n\n    /**\n     * Add spaces for visual cascade\n     */\n  }, {\n    key: \"process\",\n    value: function process(decl, result) {\n      if (!this.needCascade(decl)) {\n        _get(_getPrototypeOf(Declaration.prototype), \"process\", this).call(this, decl, result);\n        return;\n      }\n      var prefixes = _get(_getPrototypeOf(Declaration.prototype), \"process\", this).call(this, decl, result);\n      if (!prefixes || !prefixes.length) {\n        return;\n      }\n      this.restoreBefore(decl);\n      decl.raws.before = this.calcBefore(prefixes, decl);\n    }\n\n    /**\n     * Return list of prefixed properties to clean old prefixes\n     */\n  }, {\n    key: \"old\",\n    value: function old(prop, prefix) {\n      return [this.prefixed(prop, prefix)];\n    }\n  }]);\n  return Declaration;\n}(Prefixer);\nmodule.exports = Declaration;","map":{"version":3,"names":["Prefixer","require","Browsers","utils","Declaration","prop","prefix","value","prefixes","other","includes","replace","decl","prefixed","_autoprefixerCascade","all","options","cascade","raw","_autoprefixerMax","max","removeNote","length","maxPrefixed","diff","before","Array","fill","join","lines","split","min","group","up","array","last","raws","cloned","set","clone","undefined","already","parent","some","i","needCascade","calcBefore","insertBefore","down","result","isAlready","otherPrefixes","insert","restoreBefore","module","exports"],"sources":["C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/autoprefixer/lib/declaration.js"],"sourcesContent":["let Prefixer = require('./prefixer')\nlet Browsers = require('./browsers')\nlet utils = require('./utils')\n\nclass Declaration extends Prefixer {\n  /**\n   * Always true, because we already get prefixer by property name\n   */\n  check(/* decl */) {\n    return true\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return prop\n  }\n\n  /**\n   * Check `value`, that it contain other prefixes, rather than `prefix`\n   */\n  otherPrefixes(value, prefix) {\n    for (let other of Browsers.prefixes()) {\n      if (other === prefix) {\n        continue\n      }\n      if (value.includes(other)) {\n        return value.replace(/var\\([^)]+\\)/, '').includes(other)\n      }\n    }\n    return false\n  }\n\n  /**\n   * Set prefix to declaration\n   */\n  set(decl, prefix) {\n    decl.prop = this.prefixed(decl.prop, prefix)\n    return decl\n  }\n\n  /**\n   * Should we use visual cascade for prefixes\n   */\n  needCascade(decl) {\n    if (!decl._autoprefixerCascade) {\n      decl._autoprefixerCascade =\n        this.all.options.cascade !== false && decl.raw('before').includes('\\n')\n    }\n    return decl._autoprefixerCascade\n  }\n\n  /**\n   * Return maximum length of possible prefixed property\n   */\n  maxPrefixed(prefixes, decl) {\n    if (decl._autoprefixerMax) {\n      return decl._autoprefixerMax\n    }\n\n    let max = 0\n    for (let prefix of prefixes) {\n      prefix = utils.removeNote(prefix)\n      if (prefix.length > max) {\n        max = prefix.length\n      }\n    }\n    decl._autoprefixerMax = max\n\n    return decl._autoprefixerMax\n  }\n\n  /**\n   * Calculate indentation to create visual cascade\n   */\n  calcBefore(prefixes, decl, prefix = '') {\n    let max = this.maxPrefixed(prefixes, decl)\n    let diff = max - utils.removeNote(prefix).length\n\n    let before = decl.raw('before')\n    if (diff > 0) {\n      before += Array(diff).fill(' ').join('')\n    }\n\n    return before\n  }\n\n  /**\n   * Remove visual cascade\n   */\n  restoreBefore(decl) {\n    let lines = decl.raw('before').split('\\n')\n    let min = lines[lines.length - 1]\n\n    this.all.group(decl).up(prefixed => {\n      let array = prefixed.raw('before').split('\\n')\n      let last = array[array.length - 1]\n      if (last.length < min.length) {\n        min = last\n      }\n    })\n\n    lines[lines.length - 1] = min\n    decl.raws.before = lines.join('\\n')\n  }\n\n  /**\n   * Clone and insert new declaration\n   */\n  insert(decl, prefix, prefixes) {\n    let cloned = this.set(this.clone(decl), prefix)\n    if (!cloned) return undefined\n\n    let already = decl.parent.some(\n      i => i.prop === cloned.prop && i.value === cloned.value\n    )\n    if (already) {\n      return undefined\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n\n  /**\n   * Did this declaration has this prefix above\n   */\n  isAlready(decl, prefixed) {\n    let already = this.all.group(decl).up(i => i.prop === prefixed)\n    if (!already) {\n      already = this.all.group(decl).down(i => i.prop === prefixed)\n    }\n    return already\n  }\n\n  /**\n   * Clone and add prefixes for declaration\n   */\n  add(decl, prefix, prefixes, result) {\n    let prefixed = this.prefixed(decl.prop, prefix)\n    if (\n      this.isAlready(decl, prefixed) ||\n      this.otherPrefixes(decl.value, prefix)\n    ) {\n      return undefined\n    }\n    return this.insert(decl, prefix, prefixes, result)\n  }\n\n  /**\n   * Add spaces for visual cascade\n   */\n  process(decl, result) {\n    if (!this.needCascade(decl)) {\n      super.process(decl, result)\n      return\n    }\n\n    let prefixes = super.process(decl, result)\n\n    if (!prefixes || !prefixes.length) {\n      return\n    }\n\n    this.restoreBefore(decl)\n    decl.raws.before = this.calcBefore(prefixes, decl)\n  }\n\n  /**\n   * Return list of prefixed properties to clean old prefixes\n   */\n  old(prop, prefix) {\n    return [this.prefixed(prop, prefix)]\n  }\n}\n\nmodule.exports = Declaration\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}