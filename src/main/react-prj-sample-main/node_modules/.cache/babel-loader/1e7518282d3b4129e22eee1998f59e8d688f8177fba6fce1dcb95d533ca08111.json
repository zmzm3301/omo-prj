{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _classCallCheck = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _get = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _require = require('./symbols'),\n  isClean = _require.isClean,\n  my = _require.my;\nvar Declaration = require('./declaration');\nvar Comment = require('./comment');\nvar Node = require('./node');\nvar parse, Rule, AtRule, Root;\nfunction cleanSource(nodes) {\n  return nodes.map(function (i) {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\nfunction markDirtyUp(node) {\n  node[isClean] = false;\n  if (node.proxyOf.nodes) {\n    var _iterator = _createForOfIteratorHelper(node.proxyOf.nodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var i = _step.value;\n        markDirtyUp(i);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}\nvar Container = /*#__PURE__*/function (_Node) {\n  _inherits(Container, _Node);\n  var _super = _createSuper(Container);\n  function Container() {\n    _classCallCheck(this, Container);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Container, [{\n    key: \"push\",\n    value: function push(child) {\n      child.parent = this;\n      this.proxyOf.nodes.push(child);\n      return this;\n    }\n  }, {\n    key: \"each\",\n    value: function each(callback) {\n      if (!this.proxyOf.nodes) return undefined;\n      var iterator = this.getIterator();\n      var index, result;\n      while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n        index = this.indexes[iterator];\n        result = callback(this.proxyOf.nodes[index], index);\n        if (result === false) break;\n        this.indexes[iterator] += 1;\n      }\n      delete this.indexes[iterator];\n      return result;\n    }\n  }, {\n    key: \"walk\",\n    value: function walk(callback) {\n      return this.each(function (child, i) {\n        var result;\n        try {\n          result = callback(child, i);\n        } catch (e) {\n          throw child.addToError(e);\n        }\n        if (result !== false && child.walk) {\n          result = child.walk(callback);\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"walkDecls\",\n    value: function walkDecls(prop, callback) {\n      if (!callback) {\n        callback = prop;\n        return this.walk(function (child, i) {\n          if (child.type === 'decl') {\n            return callback(child, i);\n          }\n        });\n      }\n      if (prop instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'decl' && prop.test(child.prop)) {\n            return callback(child, i);\n          }\n        });\n      }\n      return this.walk(function (child, i) {\n        if (child.type === 'decl' && child.prop === prop) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkRules\",\n    value: function walkRules(selector, callback) {\n      if (!callback) {\n        callback = selector;\n        return this.walk(function (child, i) {\n          if (child.type === 'rule') {\n            return callback(child, i);\n          }\n        });\n      }\n      if (selector instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'rule' && selector.test(child.selector)) {\n            return callback(child, i);\n          }\n        });\n      }\n      return this.walk(function (child, i) {\n        if (child.type === 'rule' && child.selector === selector) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkAtRules\",\n    value: function walkAtRules(name, callback) {\n      if (!callback) {\n        callback = name;\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule') {\n            return callback(child, i);\n          }\n        });\n      }\n      if (name instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule' && name.test(child.name)) {\n            return callback(child, i);\n          }\n        });\n      }\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule' && child.name === name) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkComments\",\n    value: function walkComments(callback) {\n      return this.walk(function (child, i) {\n        if (child.type === 'comment') {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n        children[_key] = arguments[_key];\n      }\n      for (var _i = 0, _children = children; _i < _children.length; _i++) {\n        var child = _children[_i];\n        var nodes = this.normalize(child, this.last);\n        var _iterator2 = _createForOfIteratorHelper(nodes),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var node = _step2.value;\n            this.proxyOf.nodes.push(node);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        children[_key2] = arguments[_key2];\n      }\n      children = children.reverse();\n      var _iterator3 = _createForOfIteratorHelper(children),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          var nodes = this.normalize(child, this.first, 'prepend').reverse();\n          var _iterator4 = _createForOfIteratorHelper(nodes),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var node = _step4.value;\n              this.proxyOf.nodes.unshift(node);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          for (var id in this.indexes) {\n            this.indexes[id] = this.indexes[id] + nodes.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      _get(_getPrototypeOf(Container.prototype), \"cleanRaws\", this).call(this, keepBetween);\n      if (this.nodes) {\n        var _iterator5 = _createForOfIteratorHelper(this.nodes),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var node = _step5.value;\n            node.cleanRaws(keepBetween);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(exist, add) {\n      var existIndex = this.index(exist);\n      var type = existIndex === 0 ? 'prepend' : false;\n      var nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\n      existIndex = this.index(exist);\n      var _iterator6 = _createForOfIteratorHelper(nodes),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var node = _step6.value;\n          this.proxyOf.nodes.splice(existIndex, 0, node);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var index;\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n        if (existIndex <= index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(exist, add) {\n      var existIndex = this.index(exist);\n      var nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\n      existIndex = this.index(exist);\n      var _iterator7 = _createForOfIteratorHelper(nodes),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var node = _step7.value;\n          this.proxyOf.nodes.splice(existIndex + 1, 0, node);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      var index;\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n        if (existIndex < index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      child = this.index(child);\n      this.proxyOf.nodes[child].parent = undefined;\n      this.proxyOf.nodes.splice(child, 1);\n      var index;\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n        if (index >= child) {\n          this.indexes[id] = index - 1;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _iterator8 = _createForOfIteratorHelper(this.proxyOf.nodes),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var node = _step8.value;\n          node.parent = undefined;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      this.proxyOf.nodes = [];\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"replaceValues\",\n    value: function replaceValues(pattern, opts, callback) {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      this.walkDecls(function (decl) {\n        if (opts.props && !opts.props.includes(decl.prop)) return;\n        if (opts.fast && !decl.value.includes(opts.fast)) return;\n        decl.value = decl.value.replace(pattern, callback);\n      });\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"every\",\n    value: function every(condition) {\n      return this.nodes.every(condition);\n    }\n  }, {\n    key: \"some\",\n    value: function some(condition) {\n      return this.nodes.some(condition);\n    }\n  }, {\n    key: \"index\",\n    value: function index(child) {\n      if (typeof child === 'number') return child;\n      if (child.proxyOf) child = child.proxyOf;\n      return this.proxyOf.nodes.indexOf(child);\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[0];\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes, sample) {\n      var _this = this;\n      if (typeof nodes === 'string') {\n        nodes = cleanSource(parse(nodes).nodes);\n      } else if (Array.isArray(nodes)) {\n        nodes = nodes.slice(0);\n        var _iterator9 = _createForOfIteratorHelper(nodes),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var i = _step9.value;\n            if (i.parent) i.parent.removeChild(i, 'ignore');\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else if (nodes.type === 'root' && this.type !== 'document') {\n        nodes = nodes.nodes.slice(0);\n        var _iterator10 = _createForOfIteratorHelper(nodes),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _i2 = _step10.value;\n            if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      } else if (nodes.type) {\n        nodes = [nodes];\n      } else if (nodes.prop) {\n        if (typeof nodes.value === 'undefined') {\n          throw new Error('Value field is missed in node creation');\n        } else if (typeof nodes.value !== 'string') {\n          nodes.value = String(nodes.value);\n        }\n        nodes = [new Declaration(nodes)];\n      } else if (nodes.selector) {\n        nodes = [new Rule(nodes)];\n      } else if (nodes.name) {\n        nodes = [new AtRule(nodes)];\n      } else if (nodes.text) {\n        nodes = [new Comment(nodes)];\n      } else {\n        throw new Error('Unknown node type in node creation');\n      }\n      var processed = nodes.map(function (i) {\n        /* c8 ignore next */\n        if (!i[my]) Container.rebuild(i);\n        i = i.proxyOf;\n        if (i.parent) i.parent.removeChild(i);\n        if (i[isClean]) markDirtyUp(i);\n        if (typeof i.raws.before === 'undefined') {\n          if (sample && typeof sample.raws.before !== 'undefined') {\n            i.raws.before = sample.raws.before.replace(/\\S/g, '');\n          }\n        }\n        i.parent = _this.proxyOf;\n        return i;\n      });\n      return processed;\n    }\n  }, {\n    key: \"getProxyProcessor\",\n    value: function getProxyProcessor() {\n      return {\n        set: function set(node, prop, value) {\n          if (node[prop] === value) return true;\n          node[prop] = value;\n          if (prop === 'name' || prop === 'params' || prop === 'selector') {\n            node.markDirty();\n          }\n          return true;\n        },\n        get: function get(node, prop) {\n          if (prop === 'proxyOf') {\n            return node;\n          } else if (!node[prop]) {\n            return node[prop];\n          } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {\n            return function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n              return node[prop].apply(node, _toConsumableArray(args.map(function (i) {\n                if (typeof i === 'function') {\n                  return function (child, index) {\n                    return i(child.toProxy(), index);\n                  };\n                } else {\n                  return i;\n                }\n              })));\n            };\n          } else if (prop === 'every' || prop === 'some') {\n            return function (cb) {\n              return node[prop](function (child) {\n                for (var _len4 = arguments.length, other = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                  other[_key4 - 1] = arguments[_key4];\n                }\n                return cb.apply(void 0, [child.toProxy()].concat(other));\n              });\n            };\n          } else if (prop === 'root') {\n            return function () {\n              return node.root().toProxy();\n            };\n          } else if (prop === 'nodes') {\n            return node.nodes.map(function (i) {\n              return i.toProxy();\n            });\n          } else if (prop === 'first' || prop === 'last') {\n            return node[prop].toProxy();\n          } else {\n            return node[prop];\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      if (!this.lastEach) this.lastEach = 0;\n      if (!this.indexes) this.indexes = {};\n      this.lastEach += 1;\n      var iterator = this.lastEach;\n      this.indexes[iterator] = 0;\n      return iterator;\n    }\n  }]);\n  return Container;\n}(Node);\nContainer.registerParse = function (dependant) {\n  parse = dependant;\n};\nContainer.registerRule = function (dependant) {\n  Rule = dependant;\n};\nContainer.registerAtRule = function (dependant) {\n  AtRule = dependant;\n};\nContainer.registerRoot = function (dependant) {\n  Root = dependant;\n};\nmodule.exports = Container;\nContainer.default = Container;\n\n/* c8 ignore start */\nContainer.rebuild = function (node) {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype);\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype);\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype);\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype);\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype);\n  }\n  node[my] = true;\n  if (node.nodes) {\n    node.nodes.forEach(function (child) {\n      Container.rebuild(child);\n    });\n  }\n};\n/* c8 ignore stop */","map":{"version":3,"names":["require","isClean","my","Declaration","Comment","Node","parse","Rule","AtRule","Root","cleanSource","nodes","map","i","source","markDirtyUp","node","proxyOf","Container","child","parent","push","callback","undefined","iterator","getIterator","index","result","indexes","length","each","e","addToError","walk","prop","type","RegExp","test","selector","name","children","normalize","last","markDirty","reverse","first","unshift","id","keepBetween","cleanRaws","exist","add","existIndex","splice","pattern","opts","walkDecls","decl","props","includes","fast","value","replace","condition","every","some","indexOf","sample","Array","isArray","slice","removeChild","Error","String","text","processed","rebuild","raws","before","set","get","startsWith","args","toProxy","cb","other","root","lastEach","registerParse","dependant","registerRule","registerAtRule","registerRoot","module","exports","default","Object","setPrototypeOf","prototype","forEach"],"sources":["C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/postcss/lib/container.js"],"sourcesContent":["'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = existIndex === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ,eAAsBA,OAAO,CAAC,WAAW,CAAC;EAApCC,OAAO,YAAPA,OAAO;EAAEC,EAAE,YAAFA,EAAE;AACjB,IAAIC,WAAW,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIM,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI;AAE7B,SAASC,WAAW,CAACC,KAAK,EAAE;EAC1B,OAAOA,KAAK,CAACC,GAAG,CAAC,UAAAC,CAAC,EAAI;IACpB,IAAIA,CAAC,CAACF,KAAK,EAAEE,CAAC,CAACF,KAAK,GAAGD,WAAW,CAACG,CAAC,CAACF,KAAK,CAAC;IAC3C,OAAOE,CAAC,CAACC,MAAM;IACf,OAAOD,CAAC;EACV,CAAC,CAAC;AACJ;AAEA,SAASE,WAAW,CAACC,IAAI,EAAE;EACzBA,IAAI,CAACf,OAAO,CAAC,GAAG,KAAK;EACrB,IAAIe,IAAI,CAACC,OAAO,CAACN,KAAK,EAAE;IAAA,2CACRK,IAAI,CAACC,OAAO,CAACN,KAAK;MAAA;IAAA;MAAhC,oDAAkC;QAAA,IAAzBE,CAAC;QACRE,WAAW,CAACF,CAAC,CAAC;MAChB;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;AACF;AAAC,IAEKK,SAAS;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACb,cAAKC,KAAK,EAAE;MACVA,KAAK,CAACC,MAAM,GAAG,IAAI;MACnB,IAAI,CAACH,OAAO,CAACN,KAAK,CAACU,IAAI,CAACF,KAAK,CAAC;MAC9B,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,cAAKG,QAAQ,EAAE;MACb,IAAI,CAAC,IAAI,CAACL,OAAO,CAACN,KAAK,EAAE,OAAOY,SAAS;MACzC,IAAIC,QAAQ,GAAG,IAAI,CAACC,WAAW,EAAE;MAEjC,IAAIC,KAAK,EAAEC,MAAM;MACjB,OAAO,IAAI,CAACC,OAAO,CAACJ,QAAQ,CAAC,GAAG,IAAI,CAACP,OAAO,CAACN,KAAK,CAACkB,MAAM,EAAE;QACzDH,KAAK,GAAG,IAAI,CAACE,OAAO,CAACJ,QAAQ,CAAC;QAC9BG,MAAM,GAAGL,QAAQ,CAAC,IAAI,CAACL,OAAO,CAACN,KAAK,CAACe,KAAK,CAAC,EAAEA,KAAK,CAAC;QACnD,IAAIC,MAAM,KAAK,KAAK,EAAE;QAEtB,IAAI,CAACC,OAAO,CAACJ,QAAQ,CAAC,IAAI,CAAC;MAC7B;MAEA,OAAO,IAAI,CAACI,OAAO,CAACJ,QAAQ,CAAC;MAC7B,OAAOG,MAAM;IACf;EAAC;IAAA;IAAA,OAED,cAAKL,QAAQ,EAAE;MACb,OAAO,IAAI,CAACQ,IAAI,CAAC,UAACX,KAAK,EAAEN,CAAC,EAAK;QAC7B,IAAIc,MAAM;QACV,IAAI;UACFA,MAAM,GAAGL,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;QAC7B,CAAC,CAAC,OAAOkB,CAAC,EAAE;UACV,MAAMZ,KAAK,CAACa,UAAU,CAACD,CAAC,CAAC;QAC3B;QACA,IAAIJ,MAAM,KAAK,KAAK,IAAIR,KAAK,CAACc,IAAI,EAAE;UAClCN,MAAM,GAAGR,KAAK,CAACc,IAAI,CAACX,QAAQ,CAAC;QAC/B;QAEA,OAAOK,MAAM;MACf,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,mBAAUO,IAAI,EAAEZ,QAAQ,EAAE;MACxB,IAAI,CAACA,QAAQ,EAAE;QACbA,QAAQ,GAAGY,IAAI;QACf,OAAO,IAAI,CAACD,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;UAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,MAAM,EAAE;YACzB,OAAOb,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;MACA,IAAIqB,IAAI,YAAYE,MAAM,EAAE;QAC1B,OAAO,IAAI,CAACH,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;UAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,MAAM,IAAID,IAAI,CAACG,IAAI,CAAClB,KAAK,CAACe,IAAI,CAAC,EAAE;YAClD,OAAOZ,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;MACA,OAAO,IAAI,CAACoB,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;QAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,MAAM,IAAIhB,KAAK,CAACe,IAAI,KAAKA,IAAI,EAAE;UAChD,OAAOZ,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,mBAAUyB,QAAQ,EAAEhB,QAAQ,EAAE;MAC5B,IAAI,CAACA,QAAQ,EAAE;QACbA,QAAQ,GAAGgB,QAAQ;QAEnB,OAAO,IAAI,CAACL,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;UAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,MAAM,EAAE;YACzB,OAAOb,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;MACA,IAAIyB,QAAQ,YAAYF,MAAM,EAAE;QAC9B,OAAO,IAAI,CAACH,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;UAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,MAAM,IAAIG,QAAQ,CAACD,IAAI,CAAClB,KAAK,CAACmB,QAAQ,CAAC,EAAE;YAC1D,OAAOhB,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;MACA,OAAO,IAAI,CAACoB,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;QAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,MAAM,IAAIhB,KAAK,CAACmB,QAAQ,KAAKA,QAAQ,EAAE;UACxD,OAAOhB,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,qBAAY0B,IAAI,EAAEjB,QAAQ,EAAE;MAC1B,IAAI,CAACA,QAAQ,EAAE;QACbA,QAAQ,GAAGiB,IAAI;QACf,OAAO,IAAI,CAACN,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;UAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,QAAQ,EAAE;YAC3B,OAAOb,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;MACA,IAAI0B,IAAI,YAAYH,MAAM,EAAE;QAC1B,OAAO,IAAI,CAACH,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;UAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,QAAQ,IAAII,IAAI,CAACF,IAAI,CAAClB,KAAK,CAACoB,IAAI,CAAC,EAAE;YACpD,OAAOjB,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;MACA,OAAO,IAAI,CAACoB,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;QAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,QAAQ,IAAIhB,KAAK,CAACoB,IAAI,KAAKA,IAAI,EAAE;UAClD,OAAOjB,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,sBAAaS,QAAQ,EAAE;MACrB,OAAO,IAAI,CAACW,IAAI,CAAC,UAACd,KAAK,EAAEN,CAAC,EAAK;QAC7B,IAAIM,KAAK,CAACgB,IAAI,KAAK,SAAS,EAAE;UAC5B,OAAOb,QAAQ,CAACH,KAAK,EAAEN,CAAC,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,kBAAoB;MAAA,kCAAV2B,QAAQ;QAARA,QAAQ;MAAA;MAChB,6BAAkBA,QAAQ,+BAAE;QAAvB,IAAIrB,KAAK;QACZ,IAAIR,KAAK,GAAG,IAAI,CAAC8B,SAAS,CAACtB,KAAK,EAAE,IAAI,CAACuB,IAAI,CAAC;QAAA,4CAC3B/B,KAAK;UAAA;QAAA;UAAtB,uDAAwB;YAAA,IAAfK,IAAI;YAAW,IAAI,CAACC,OAAO,CAACN,KAAK,CAACU,IAAI,CAACL,IAAI,CAAC;UAAD;QAAC;UAAA;QAAA;UAAA;QAAA;MACvD;MAEA,IAAI,CAAC2B,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,mBAAqB;MAAA,mCAAVH,QAAQ;QAARA,QAAQ;MAAA;MACjBA,QAAQ,GAAGA,QAAQ,CAACI,OAAO,EAAE;MAAA,4CACXJ,QAAQ;QAAA;MAAA;QAA1B,uDAA4B;UAAA,IAAnBrB,KAAK;UACZ,IAAIR,KAAK,GAAG,IAAI,CAAC8B,SAAS,CAACtB,KAAK,EAAE,IAAI,CAAC0B,KAAK,EAAE,SAAS,CAAC,CAACD,OAAO,EAAE;UAAA,4CACjDjC,KAAK;YAAA;UAAA;YAAtB,uDAAwB;cAAA,IAAfK,IAAI;cAAW,IAAI,CAACC,OAAO,CAACN,KAAK,CAACmC,OAAO,CAAC9B,IAAI,CAAC;YAAD;UAAC;YAAA;UAAA;YAAA;UAAA;UACxD,KAAK,IAAI+B,EAAE,IAAI,IAAI,CAACnB,OAAO,EAAE;YAC3B,IAAI,CAACA,OAAO,CAACmB,EAAE,CAAC,GAAG,IAAI,CAACnB,OAAO,CAACmB,EAAE,CAAC,GAAGpC,KAAK,CAACkB,MAAM;UACpD;QACF;MAAC;QAAA;MAAA;QAAA;MAAA;MAED,IAAI,CAACc,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,mBAAUK,WAAW,EAAE;MACrB,yEAAgBA,WAAW;MAC3B,IAAI,IAAI,CAACrC,KAAK,EAAE;QAAA,4CACG,IAAI,CAACA,KAAK;UAAA;QAAA;UAA3B,uDAA6B;YAAA,IAApBK,IAAI;YAAgBA,IAAI,CAACiC,SAAS,CAACD,WAAW,CAAC;UAAD;QAAC;UAAA;QAAA;UAAA;QAAA;MAC1D;IACF;EAAC;IAAA;IAAA,OAED,sBAAaE,KAAK,EAAEC,GAAG,EAAE;MACvB,IAAIC,UAAU,GAAG,IAAI,CAAC1B,KAAK,CAACwB,KAAK,CAAC;MAClC,IAAIf,IAAI,GAAGiB,UAAU,KAAK,CAAC,GAAG,SAAS,GAAG,KAAK;MAC/C,IAAIzC,KAAK,GAAG,IAAI,CAAC8B,SAAS,CAACU,GAAG,EAAE,IAAI,CAAClC,OAAO,CAACN,KAAK,CAACyC,UAAU,CAAC,EAAEjB,IAAI,CAAC,CAACS,OAAO,EAAE;MAC/EQ,UAAU,GAAG,IAAI,CAAC1B,KAAK,CAACwB,KAAK,CAAC;MAAA,4CACbvC,KAAK;QAAA;MAAA;QAAtB,uDAAwB;UAAA,IAAfK,IAAI;UAAW,IAAI,CAACC,OAAO,CAACN,KAAK,CAAC0C,MAAM,CAACD,UAAU,EAAE,CAAC,EAAEpC,IAAI,CAAC;QAAD;MAAC;QAAA;MAAA;QAAA;MAAA;MAEtE,IAAIU,KAAK;MACT,KAAK,IAAIqB,EAAE,IAAI,IAAI,CAACnB,OAAO,EAAE;QAC3BF,KAAK,GAAG,IAAI,CAACE,OAAO,CAACmB,EAAE,CAAC;QACxB,IAAIK,UAAU,IAAI1B,KAAK,EAAE;UACvB,IAAI,CAACE,OAAO,CAACmB,EAAE,CAAC,GAAGrB,KAAK,GAAGf,KAAK,CAACkB,MAAM;QACzC;MACF;MAEA,IAAI,CAACc,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,qBAAYO,KAAK,EAAEC,GAAG,EAAE;MACtB,IAAIC,UAAU,GAAG,IAAI,CAAC1B,KAAK,CAACwB,KAAK,CAAC;MAClC,IAAIvC,KAAK,GAAG,IAAI,CAAC8B,SAAS,CAACU,GAAG,EAAE,IAAI,CAAClC,OAAO,CAACN,KAAK,CAACyC,UAAU,CAAC,CAAC,CAACR,OAAO,EAAE;MACzEQ,UAAU,GAAG,IAAI,CAAC1B,KAAK,CAACwB,KAAK,CAAC;MAAA,4CACbvC,KAAK;QAAA;MAAA;QAAtB,uDAAwB;UAAA,IAAfK,IAAI;UAAW,IAAI,CAACC,OAAO,CAACN,KAAK,CAAC0C,MAAM,CAACD,UAAU,GAAG,CAAC,EAAE,CAAC,EAAEpC,IAAI,CAAC;QAAD;MAAC;QAAA;MAAA;QAAA;MAAA;MAE1E,IAAIU,KAAK;MACT,KAAK,IAAIqB,EAAE,IAAI,IAAI,CAACnB,OAAO,EAAE;QAC3BF,KAAK,GAAG,IAAI,CAACE,OAAO,CAACmB,EAAE,CAAC;QACxB,IAAIK,UAAU,GAAG1B,KAAK,EAAE;UACtB,IAAI,CAACE,OAAO,CAACmB,EAAE,CAAC,GAAGrB,KAAK,GAAGf,KAAK,CAACkB,MAAM;QACzC;MACF;MAEA,IAAI,CAACc,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,qBAAYxB,KAAK,EAAE;MACjBA,KAAK,GAAG,IAAI,CAACO,KAAK,CAACP,KAAK,CAAC;MACzB,IAAI,CAACF,OAAO,CAACN,KAAK,CAACQ,KAAK,CAAC,CAACC,MAAM,GAAGG,SAAS;MAC5C,IAAI,CAACN,OAAO,CAACN,KAAK,CAAC0C,MAAM,CAAClC,KAAK,EAAE,CAAC,CAAC;MAEnC,IAAIO,KAAK;MACT,KAAK,IAAIqB,EAAE,IAAI,IAAI,CAACnB,OAAO,EAAE;QAC3BF,KAAK,GAAG,IAAI,CAACE,OAAO,CAACmB,EAAE,CAAC;QACxB,IAAIrB,KAAK,IAAIP,KAAK,EAAE;UAClB,IAAI,CAACS,OAAO,CAACmB,EAAE,CAAC,GAAGrB,KAAK,GAAG,CAAC;QAC9B;MACF;MAEA,IAAI,CAACiB,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,qBAAY;MAAA,4CACO,IAAI,CAAC1B,OAAO,CAACN,KAAK;QAAA;MAAA;QAAnC,uDAAqC;UAAA,IAA5BK,IAAI;UAAwBA,IAAI,CAACI,MAAM,GAAGG,SAAS;QAAD;MAAC;QAAA;MAAA;QAAA;MAAA;MAC5D,IAAI,CAACN,OAAO,CAACN,KAAK,GAAG,EAAE;MAEvB,IAAI,CAACgC,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,uBAAcW,OAAO,EAAEC,IAAI,EAAEjC,QAAQ,EAAE;MACrC,IAAI,CAACA,QAAQ,EAAE;QACbA,QAAQ,GAAGiC,IAAI;QACfA,IAAI,GAAG,CAAC,CAAC;MACX;MAEA,IAAI,CAACC,SAAS,CAAC,UAAAC,IAAI,EAAI;QACrB,IAAIF,IAAI,CAACG,KAAK,IAAI,CAACH,IAAI,CAACG,KAAK,CAACC,QAAQ,CAACF,IAAI,CAACvB,IAAI,CAAC,EAAE;QACnD,IAAIqB,IAAI,CAACK,IAAI,IAAI,CAACH,IAAI,CAACI,KAAK,CAACF,QAAQ,CAACJ,IAAI,CAACK,IAAI,CAAC,EAAE;QAElDH,IAAI,CAACI,KAAK,GAAGJ,IAAI,CAACI,KAAK,CAACC,OAAO,CAACR,OAAO,EAAEhC,QAAQ,CAAC;MACpD,CAAC,CAAC;MAEF,IAAI,CAACqB,SAAS,EAAE;MAEhB,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,eAAMoB,SAAS,EAAE;MACf,OAAO,IAAI,CAACpD,KAAK,CAACqD,KAAK,CAACD,SAAS,CAAC;IACpC;EAAC;IAAA;IAAA,OAED,cAAKA,SAAS,EAAE;MACd,OAAO,IAAI,CAACpD,KAAK,CAACsD,IAAI,CAACF,SAAS,CAAC;IACnC;EAAC;IAAA;IAAA,OAED,eAAM5C,KAAK,EAAE;MACX,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK;MAC3C,IAAIA,KAAK,CAACF,OAAO,EAAEE,KAAK,GAAGA,KAAK,CAACF,OAAO;MACxC,OAAO,IAAI,CAACA,OAAO,CAACN,KAAK,CAACuD,OAAO,CAAC/C,KAAK,CAAC;IAC1C;EAAC;IAAA;IAAA,KAED,eAAY;MACV,IAAI,CAAC,IAAI,CAACF,OAAO,CAACN,KAAK,EAAE,OAAOY,SAAS;MACzC,OAAO,IAAI,CAACN,OAAO,CAACN,KAAK,CAAC,CAAC,CAAC;IAC9B;EAAC;IAAA;IAAA,KAED,eAAW;MACT,IAAI,CAAC,IAAI,CAACM,OAAO,CAACN,KAAK,EAAE,OAAOY,SAAS;MACzC,OAAO,IAAI,CAACN,OAAO,CAACN,KAAK,CAAC,IAAI,CAACM,OAAO,CAACN,KAAK,CAACkB,MAAM,GAAG,CAAC,CAAC;IAC1D;EAAC;IAAA;IAAA,OAED,mBAAUlB,KAAK,EAAEwD,MAAM,EAAE;MAAA;MACvB,IAAI,OAAOxD,KAAK,KAAK,QAAQ,EAAE;QAC7BA,KAAK,GAAGD,WAAW,CAACJ,KAAK,CAACK,KAAK,CAAC,CAACA,KAAK,CAAC;MACzC,CAAC,MAAM,IAAIyD,KAAK,CAACC,OAAO,CAAC1D,KAAK,CAAC,EAAE;QAC/BA,KAAK,GAAGA,KAAK,CAAC2D,KAAK,CAAC,CAAC,CAAC;QAAA,4CACR3D,KAAK;UAAA;QAAA;UAAnB,uDAAqB;YAAA,IAAZE,CAAC;YACR,IAAIA,CAAC,CAACO,MAAM,EAAEP,CAAC,CAACO,MAAM,CAACmD,WAAW,CAAC1D,CAAC,EAAE,QAAQ,CAAC;UACjD;QAAC;UAAA;QAAA;UAAA;QAAA;MACH,CAAC,MAAM,IAAIF,KAAK,CAACwB,IAAI,KAAK,MAAM,IAAI,IAAI,CAACA,IAAI,KAAK,UAAU,EAAE;QAC5DxB,KAAK,GAAGA,KAAK,CAACA,KAAK,CAAC2D,KAAK,CAAC,CAAC,CAAC;QAAA,6CACd3D,KAAK;UAAA;QAAA;UAAnB,0DAAqB;YAAA,IAAZE,GAAC;YACR,IAAIA,GAAC,CAACO,MAAM,EAAEP,GAAC,CAACO,MAAM,CAACmD,WAAW,CAAC1D,GAAC,EAAE,QAAQ,CAAC;UACjD;QAAC;UAAA;QAAA;UAAA;QAAA;MACH,CAAC,MAAM,IAAIF,KAAK,CAACwB,IAAI,EAAE;QACrBxB,KAAK,GAAG,CAACA,KAAK,CAAC;MACjB,CAAC,MAAM,IAAIA,KAAK,CAACuB,IAAI,EAAE;QACrB,IAAI,OAAOvB,KAAK,CAACkD,KAAK,KAAK,WAAW,EAAE;UACtC,MAAM,IAAIW,KAAK,CAAC,wCAAwC,CAAC;QAC3D,CAAC,MAAM,IAAI,OAAO7D,KAAK,CAACkD,KAAK,KAAK,QAAQ,EAAE;UAC1ClD,KAAK,CAACkD,KAAK,GAAGY,MAAM,CAAC9D,KAAK,CAACkD,KAAK,CAAC;QACnC;QACAlD,KAAK,GAAG,CAAC,IAAIR,WAAW,CAACQ,KAAK,CAAC,CAAC;MAClC,CAAC,MAAM,IAAIA,KAAK,CAAC2B,QAAQ,EAAE;QACzB3B,KAAK,GAAG,CAAC,IAAIJ,IAAI,CAACI,KAAK,CAAC,CAAC;MAC3B,CAAC,MAAM,IAAIA,KAAK,CAAC4B,IAAI,EAAE;QACrB5B,KAAK,GAAG,CAAC,IAAIH,MAAM,CAACG,KAAK,CAAC,CAAC;MAC7B,CAAC,MAAM,IAAIA,KAAK,CAAC+D,IAAI,EAAE;QACrB/D,KAAK,GAAG,CAAC,IAAIP,OAAO,CAACO,KAAK,CAAC,CAAC;MAC9B,CAAC,MAAM;QACL,MAAM,IAAI6D,KAAK,CAAC,oCAAoC,CAAC;MACvD;MAEA,IAAIG,SAAS,GAAGhE,KAAK,CAACC,GAAG,CAAC,UAAAC,CAAC,EAAI;QAC7B;QACA,IAAI,CAACA,CAAC,CAACX,EAAE,CAAC,EAAEgB,SAAS,CAAC0D,OAAO,CAAC/D,CAAC,CAAC;QAChCA,CAAC,GAAGA,CAAC,CAACI,OAAO;QACb,IAAIJ,CAAC,CAACO,MAAM,EAAEP,CAAC,CAACO,MAAM,CAACmD,WAAW,CAAC1D,CAAC,CAAC;QACrC,IAAIA,CAAC,CAACZ,OAAO,CAAC,EAAEc,WAAW,CAACF,CAAC,CAAC;QAC9B,IAAI,OAAOA,CAAC,CAACgE,IAAI,CAACC,MAAM,KAAK,WAAW,EAAE;UACxC,IAAIX,MAAM,IAAI,OAAOA,MAAM,CAACU,IAAI,CAACC,MAAM,KAAK,WAAW,EAAE;YACvDjE,CAAC,CAACgE,IAAI,CAACC,MAAM,GAAGX,MAAM,CAACU,IAAI,CAACC,MAAM,CAAChB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;UACvD;QACF;QACAjD,CAAC,CAACO,MAAM,GAAG,KAAI,CAACH,OAAO;QACvB,OAAOJ,CAAC;MACV,CAAC,CAAC;MAEF,OAAO8D,SAAS;IAClB;EAAC;IAAA;IAAA,OAED,6BAAoB;MAClB,OAAO;QACLI,GAAG,eAAC/D,IAAI,EAAEkB,IAAI,EAAE2B,KAAK,EAAE;UACrB,IAAI7C,IAAI,CAACkB,IAAI,CAAC,KAAK2B,KAAK,EAAE,OAAO,IAAI;UACrC7C,IAAI,CAACkB,IAAI,CAAC,GAAG2B,KAAK;UAClB,IAAI3B,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,UAAU,EAAE;YAC/DlB,IAAI,CAAC2B,SAAS,EAAE;UAClB;UACA,OAAO,IAAI;QACb,CAAC;QAEDqC,GAAG,eAAChE,IAAI,EAAEkB,IAAI,EAAE;UACd,IAAIA,IAAI,KAAK,SAAS,EAAE;YACtB,OAAOlB,IAAI;UACb,CAAC,MAAM,IAAI,CAACA,IAAI,CAACkB,IAAI,CAAC,EAAE;YACtB,OAAOlB,IAAI,CAACkB,IAAI,CAAC;UACnB,CAAC,MAAM,IACLA,IAAI,KAAK,MAAM,IACd,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAAC+C,UAAU,CAAC,MAAM,CAAE,EACrD;YACA,OAAO,YAAa;cAAA,mCAATC,IAAI;gBAAJA,IAAI;cAAA;cACb,OAAOlE,IAAI,CAACkB,IAAI,CAAC,OAAVlB,IAAI,qBACNkE,IAAI,CAACtE,GAAG,CAAC,UAAAC,CAAC,EAAI;gBACf,IAAI,OAAOA,CAAC,KAAK,UAAU,EAAE;kBAC3B,OAAO,UAACM,KAAK,EAAEO,KAAK;oBAAA,OAAKb,CAAC,CAACM,KAAK,CAACgE,OAAO,EAAE,EAAEzD,KAAK,CAAC;kBAAA;gBACpD,CAAC,MAAM;kBACL,OAAOb,CAAC;gBACV;cACF,CAAC,CAAC,EACH;YACH,CAAC;UACH,CAAC,MAAM,IAAIqB,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM,EAAE;YAC9C,OAAO,UAAAkD,EAAE,EAAI;cACX,OAAOpE,IAAI,CAACkB,IAAI,CAAC,CAAC,UAACf,KAAK;gBAAA,mCAAKkE,KAAK;kBAALA,KAAK;gBAAA;gBAAA,OAChCD,EAAE,gBAACjE,KAAK,CAACgE,OAAO,EAAE,SAAKE,KAAK,EAAC;cAAA,EAC9B;YACH,CAAC;UACH,CAAC,MAAM,IAAInD,IAAI,KAAK,MAAM,EAAE;YAC1B,OAAO;cAAA,OAAMlB,IAAI,CAACsE,IAAI,EAAE,CAACH,OAAO,EAAE;YAAA;UACpC,CAAC,MAAM,IAAIjD,IAAI,KAAK,OAAO,EAAE;YAC3B,OAAOlB,IAAI,CAACL,KAAK,CAACC,GAAG,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAACsE,OAAO,EAAE;YAAA,EAAC;UACzC,CAAC,MAAM,IAAIjD,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,MAAM,EAAE;YAC9C,OAAOlB,IAAI,CAACkB,IAAI,CAAC,CAACiD,OAAO,EAAE;UAC7B,CAAC,MAAM;YACL,OAAOnE,IAAI,CAACkB,IAAI,CAAC;UACnB;QACF;MACF,CAAC;IACH;EAAC;IAAA;IAAA,OAED,uBAAc;MACZ,IAAI,CAAC,IAAI,CAACqD,QAAQ,EAAE,IAAI,CAACA,QAAQ,GAAG,CAAC;MACrC,IAAI,CAAC,IAAI,CAAC3D,OAAO,EAAE,IAAI,CAACA,OAAO,GAAG,CAAC,CAAC;MAEpC,IAAI,CAAC2D,QAAQ,IAAI,CAAC;MAClB,IAAI/D,QAAQ,GAAG,IAAI,CAAC+D,QAAQ;MAC5B,IAAI,CAAC3D,OAAO,CAACJ,QAAQ,CAAC,GAAG,CAAC;MAE1B,OAAOA,QAAQ;IACjB;EAAC;EAAA;AAAA,EAhXqBnB,IAAI;AAmX5Ba,SAAS,CAACsE,aAAa,GAAG,UAAAC,SAAS,EAAI;EACrCnF,KAAK,GAAGmF,SAAS;AACnB,CAAC;AAEDvE,SAAS,CAACwE,YAAY,GAAG,UAAAD,SAAS,EAAI;EACpClF,IAAI,GAAGkF,SAAS;AAClB,CAAC;AAEDvE,SAAS,CAACyE,cAAc,GAAG,UAAAF,SAAS,EAAI;EACtCjF,MAAM,GAAGiF,SAAS;AACpB,CAAC;AAEDvE,SAAS,CAAC0E,YAAY,GAAG,UAAAH,SAAS,EAAI;EACpChF,IAAI,GAAGgF,SAAS;AAClB,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAG5E,SAAS;AAC1BA,SAAS,CAAC6E,OAAO,GAAG7E,SAAS;;AAE7B;AACAA,SAAS,CAAC0D,OAAO,GAAG,UAAA5D,IAAI,EAAI;EAC1B,IAAIA,IAAI,CAACmB,IAAI,KAAK,QAAQ,EAAE;IAC1B6D,MAAM,CAACC,cAAc,CAACjF,IAAI,EAAER,MAAM,CAAC0F,SAAS,CAAC;EAC/C,CAAC,MAAM,IAAIlF,IAAI,CAACmB,IAAI,KAAK,MAAM,EAAE;IAC/B6D,MAAM,CAACC,cAAc,CAACjF,IAAI,EAAET,IAAI,CAAC2F,SAAS,CAAC;EAC7C,CAAC,MAAM,IAAIlF,IAAI,CAACmB,IAAI,KAAK,MAAM,EAAE;IAC/B6D,MAAM,CAACC,cAAc,CAACjF,IAAI,EAAEb,WAAW,CAAC+F,SAAS,CAAC;EACpD,CAAC,MAAM,IAAIlF,IAAI,CAACmB,IAAI,KAAK,SAAS,EAAE;IAClC6D,MAAM,CAACC,cAAc,CAACjF,IAAI,EAAEZ,OAAO,CAAC8F,SAAS,CAAC;EAChD,CAAC,MAAM,IAAIlF,IAAI,CAACmB,IAAI,KAAK,MAAM,EAAE;IAC/B6D,MAAM,CAACC,cAAc,CAACjF,IAAI,EAAEP,IAAI,CAACyF,SAAS,CAAC;EAC7C;EAEAlF,IAAI,CAACd,EAAE,CAAC,GAAG,IAAI;EAEf,IAAIc,IAAI,CAACL,KAAK,EAAE;IACdK,IAAI,CAACL,KAAK,CAACwF,OAAO,CAAC,UAAAhF,KAAK,EAAI;MAC1BD,SAAS,CAAC0D,OAAO,CAACzD,KAAK,CAAC;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}