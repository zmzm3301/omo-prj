{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Prefixer = require('./prefixer');\nvar OldValue = require('./old-value');\nvar vendor = require('./vendor');\nvar utils = require('./utils');\nvar Value = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Value, _Prefixer);\n  var _super = _createSuper(Value);\n  function Value() {\n    _classCallCheck(this, Value);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Value, [{\n    key: \"check\",\n    value:\n    /**\n     * Is declaration need to be prefixed\n     */\n    function check(decl) {\n      var value = decl.value;\n      if (!value.includes(this.name)) {\n        return false;\n      }\n      return !!value.match(this.regexp());\n    }\n\n    /**\n     * Lazy regexp loading\n     */\n  }, {\n    key: \"regexp\",\n    value: function regexp() {\n      return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n    }\n\n    /**\n     * Add prefix to values in string\n     */\n  }, {\n    key: \"replace\",\n    value: function replace(string, prefix) {\n      return string.replace(this.regexp(), \"$1\".concat(prefix, \"$2\"));\n    }\n\n    /**\n     * Get value with comments if it was not changed\n     */\n  }, {\n    key: \"value\",\n    value: function value(decl) {\n      if (decl.raws.value && decl.raws.value.value === decl.value) {\n        return decl.raws.value.raw;\n      } else {\n        return decl.value;\n      }\n    }\n\n    /**\n     * Save values with next prefixed token\n     */\n  }, {\n    key: \"add\",\n    value: function add(decl, prefix) {\n      if (!decl._autoprefixerValues) {\n        decl._autoprefixerValues = {};\n      }\n      var value = decl._autoprefixerValues[prefix] || this.value(decl);\n      var before;\n      do {\n        before = value;\n        value = this.replace(value, prefix);\n        if (value === false) return;\n      } while (value !== before);\n      decl._autoprefixerValues[prefix] = value;\n    }\n\n    /**\n     * Return function to fast find prefixed value\n     */\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      return new OldValue(this.name, prefix + this.name);\n    }\n  }], [{\n    key: \"save\",\n    value:\n    /**\n     * Clone decl for each prefixed values\n     */\n    function save(prefixes, decl) {\n      var _this = this;\n      var prop = decl.prop;\n      var result = [];\n      var _loop = function _loop() {\n        var value = decl._autoprefixerValues[prefix];\n        if (value === decl.value) {\n          return \"continue\";\n        }\n        var item;\n        var propPrefix = vendor.prefix(prop);\n        if (propPrefix === '-pie-') {\n          return \"continue\";\n        }\n        if (propPrefix === prefix) {\n          item = decl.value = value;\n          result.push(item);\n          return \"continue\";\n        }\n        var prefixed = prefixes.prefixed(prop, prefix);\n        var rule = decl.parent;\n        if (!rule.every(function (i) {\n          return i.prop !== prefixed;\n        })) {\n          result.push(item);\n          return \"continue\";\n        }\n        var trimmed = value.replace(/\\s+/, ' ');\n        var already = rule.some(function (i) {\n          return i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed;\n        });\n        if (already) {\n          result.push(item);\n          return \"continue\";\n        }\n        var cloned = _this.clone(decl, {\n          value: value\n        });\n        item = decl.parent.insertBefore(decl, cloned);\n        result.push(item);\n      };\n      for (var prefix in decl._autoprefixerValues) {\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      }\n      return result;\n    }\n  }]);\n  return Value;\n}(Prefixer);\nmodule.exports = Value;","map":{"version":3,"names":["Prefixer","require","OldValue","vendor","utils","Value","decl","value","includes","name","match","regexp","regexpCache","string","prefix","replace","raws","raw","_autoprefixerValues","before","prefixes","prop","result","item","propPrefix","push","prefixed","rule","parent","every","i","trimmed","already","some","cloned","clone","insertBefore","module","exports"],"sources":["C:/Users/zmzm3/git/omo/omo-prj/src/main/react-prj-sample-main/node_modules/autoprefixer/lib/value.js"],"sourcesContent":["let Prefixer = require('./prefixer')\nlet OldValue = require('./old-value')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop\n    let result = []\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix]\n\n      if (value === decl.value) {\n        continue\n      }\n\n      let item\n      let propPrefix = vendor.prefix(prop)\n\n      if (propPrefix === '-pie-') {\n        continue\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value\n        result.push(item)\n        continue\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix)\n      let rule = decl.parent\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item)\n        continue\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ')\n      let already = rule.some(\n        i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed\n      )\n\n      if (already) {\n        result.push(item)\n        continue\n      }\n\n      let cloned = this.clone(decl, { value })\n      item = decl.parent.insertBefore(decl, cloned)\n\n      result.push(item)\n    }\n\n    return result\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check(decl) {\n    let value = decl.value\n    if (!value.includes(this.name)) {\n      return false\n    }\n\n    return !!value.match(this.regexp())\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name))\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`)\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw\n    } else {\n      return decl.value\n    }\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {}\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl)\n\n    let before\n    do {\n      before = value\n      value = this.replace(value, prefix)\n      if (value === false) return\n    } while (value !== before)\n\n    decl._autoprefixerValues[prefix] = value\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name)\n  }\n}\n\nmodule.exports = Value\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}